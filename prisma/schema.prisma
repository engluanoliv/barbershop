generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Barber Table
model Barber {
  id   String @id @default(uuid())
  name String

  barberServices    BarberService[]
  barberBarbershops BarbershopBarber[]
  barberSlots       BarberSlot[]
  barberBookings    Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Barbershop Table
model Barbershop {
  id          String   @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String

  barbershopServices BarbershopService[]
  barbershopBarbers  BarbershopBarber[]
  barbshopBookings   Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Services Table
model Service {
  id          String  @id @default(uuid())
  name        String
  description String
  imageUrl    String
  price       Decimal @db.Decimal(10, 2)

  serviceBarbershops BarbershopService[]
  servicesBarbers    BarberService[]
  serviceBookings    Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Slot Table
model Slot {
  id   String   @id @default(uuid())
  time DateTime

  slotBarbers  BarberSlot[]
  slotBookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Relation between Barbershop and Service
model BarbershopService {
  id String @id @default(uuid())

  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Relation between Barbeshop and Barber
model BarbershopBarber {
  id String @id @default(uuid())

  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])

  barberId String
  barber   Barber @relation(fields: [barberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Relation between Barber and Service
model BarberService {
  id String @id @default(uuid())

  barberId String
  barber   Barber @relation(fields: [barberId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Relation between Barber and Slot
model BarberSlot {
  id String @id @default(uuid())

  barberId String
  barber   Barber @relation(fields: [barberId], references: [id])

  slotId String
  slot   Slot   @relation(fields: [slotId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// Booking Table
model Booking {
  id   String   @id @default(uuid())
  date DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  barberId String
  barber   Barber @relation(fields: [barberId], references: [id])

  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  slotId String
  slot   Slot   @relation(fields: [slotId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
